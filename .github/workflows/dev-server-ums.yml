name: dev-ums-server
on:
  push:
    branches:
      - development
    paths:
      - server/**

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: microservices-ums-image
  IMAGE_NAME: microservices-ums-image
  ECS_SERVICE: development-ums-service
  ECS_CLUSTER: development-locus-ecs-cluster
  ECS_TASK_DEFINITION: development-ums-td
  CONTAINER_NAME: development-ums-container
  COMMIT: 0
  TAG: 0
  DEV_MONITOR_ID: 72814581
  SCHEMA_DIRECTORY: ums
jobs:
  semantic_release:
    name: semantic release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: none 
      issues: write
      packages: write
    environment: development
    steps:
      - name: Checkout branch "development"
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          ref: "development"
          fetch-depth: 0
      - name: create a release
        run: |
          npm i -g semantic-release
          npm i -g @semantic-release/changelog
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          
      - name: push changes to github
        run: |
          git config user.name "${{ secrets.GH_ADMIN_USERNAME }}"
          git config user.email "${{ secrets.GH_ADMIN_EMAIL }}"
          git remote set-url origin https://${{secrets.GH_ADMIN_USERNAME}}:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY
          git add .
          git commit -m"fix: changelog and package.json release[skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }} 
          

  deployment:
    if: always()
    needs: semantic_release
    name: deployment
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout branch "development"
        uses: actions/checkout@v2
        with:
          ref: "development"
          fetch-depth: 0
         
      - name: filter the tag from commits
        run: |
          array=(${{join(github.event.commits.*.id, ' ') }})
          for i in "${array[@]}"
          do
            echo "value: ${i}"
            echo "output: $(git tag --contains ${i})"
            if [[ "$(git tag --contains ${i})" != "" ]]
            then
              echo "COMMIT=${i}" >> $GITHUB_ENV
            fi
          done

      - name: Get tag from commit
        run: |
          echo "TAG=$(git tag --contains ${{env.COMMIT}} |head -n 1)" >> $GITHUB_ENV
      - name: tag
        run: echo ${{env.TAG}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: update semantic tag in paramstore
        if: "${{env.TAG != ''}}"
        run: |
          aws ssm put-parameter --name "/development/microservices-ums/SEMANTIC_CURRENT_TAG" --value ${{env.TAG}} --type String --overwrite

      - name: get parameters form param store
        id: param-store
        run: |
          aws ssm put-parameter --name "/development/microservices-ums/SCHEMA_DIRECTORY" --value ${{env.SCHEMA_DIRECTORY}} --type String --overwrite      
          aws ssm get-parameters --names /development/NPMRC --with-decryption --output text --query "Parameters[*].Value" > ./server/.npmrc
          aws ssm get-parameters-by-path --region ap-south-1 --path /development/microservices-ums --with-decryption |  jq -r '.Parameters[]|((.Name|capture(".*/(?<a>.*)").a+"=")+.Value)' > ./server/envplaceholder
          cp ./server/envplaceholder ./server/.env
          cat ./server/.env

      - name: Database Migration
        id: migration
        run: |
          cd ./server
          npm i
          npm run db:migrate
          npm run db:seed

      - name: Login to Amazon 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: get the image tag
        id: image
        run: |
          if [ "${{env.TAG}}" != "" ]; then
            echo "::set-output name=imagetag::${{env.TAG}}"
          else
            echo "::set-output name=imagetag::$(date +%Y-%m-%d-%H%M%S)"
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          echo "image tag name  ${{ steps.image.outputs.imagetag }}"
          docker build -t $IMAGE_NAME:${{ steps.image.outputs.imagetag }} ./server --build-arg NODE_HEAP_MEMORY=2048 --build-arg DD_PROFILING_ENABLED=true
          docker tag $IMAGE_NAME:${{ steps.image.outputs.imagetag }} 733716689918.dkr.ecr.ap-south-1.amazonaws.com/$IMAGE_NAME:${{ steps.image.outputs.imagetag }}
          docker push 733716689918.dkr.ecr.ap-south-1.amazonaws.com/$IMAGE_NAME:${{ steps.image.outputs.imagetag }}   
          echo "::set-output name=image::733716689918.dkr.ecr.ap-south-1.amazonaws.com/$IMAGE_NAME:${{ steps.image.outputs.imagetag }}"
          
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > app-task-definition.json
          cat app-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: service-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: app-task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.service-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true


#       - name: Report Status
#         if: always()
#         uses: ravsamhq/notify-slack-action@v1
#         with:
#           status: ${{ job.status }}
#           notification_title: "Webapp: UMS (Development) deployment has been failed."
#           footer: "Linked to Repo <{repo_url}|{repo}>"
#           notify_when: "failure"
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
