name: uat-ums
on: 
  push:
    branches:
      - development
    paths:
      - server/**
      
env:
  AWS_REGION: ap-south-1                            
  ECR_REPOSITORY: uat-microservices-ums-image
  IMAGE_NAME: uat-microservices-ums-image
  ECS_SERVICE: uat-ums-service
  ECS_CLUSTER:  uat-locus-ecs-cluster
  ECS_TASK_DEFINITION: uat-ums-td
  CONTAINER_NAME: uat-ums-container
  SCHEMA_DIRECTORY: ums
jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout branch "development"
        uses: actions/checkout@v2
        with:
          ref: 'development'
          fetch-depth: 0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: get parameters form param store
        id: param-store
        run: |
          aws ssm put-parameter --name "/uat/microservices-ums/SCHEMA_DIRECTORY" --value ${{env.SCHEMA_DIRECTORY}} --type String --overwrite
          aws ssm get-parameters --names /uat/NPMRC --with-decryption --output text --query "Parameters[*].Value" > ./server/.npmrc
          aws ssm get-parameters-by-path --region ap-south-1 --path /uat/microservices-ums --with-decryption |  jq -r '.Parameters[]|((.Name|capture(".*/(?<a>.*)").a+"=")+.Value)' > ./server/envplaceholder
          cp ./server/envplaceholder ./server/.env
          cat ./server/.env  
      - name: Database Migration
        id: migration
        run: |
          cd ./server
          npm i
          npm run db:migrate
          npm run db:seed          
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build -t $IMAGE_NAME:latest ./server
          docker tag $IMAGE_NAME:latest 733716689918.dkr.ecr.ap-south-1.amazonaws.com/$IMAGE_NAME:latest
          docker push 733716689918.dkr.ecr.ap-south-1.amazonaws.com/$IMAGE_NAME:latest     
          echo "::set-output name=image::733716689918.dkr.ecr.ap-south-1.amazonaws.com/$IMAGE_NAME:latest"
                  
          
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > app-task-definition.json
          cat app-task-definition.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: service-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
            task-definition: app-task-definition.json
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.service-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
